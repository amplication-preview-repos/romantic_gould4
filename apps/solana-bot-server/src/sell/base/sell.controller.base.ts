/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SellService } from "../sell.service";
import { SellCreateInput } from "./SellCreateInput";
import { Sell } from "./Sell";
import { SellFindManyArgs } from "./SellFindManyArgs";
import { SellWhereUniqueInput } from "./SellWhereUniqueInput";
import { SellUpdateInput } from "./SellUpdateInput";

export class SellControllerBase {
  constructor(protected readonly service: SellService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sell })
  async createSell(@common.Body() data: SellCreateInput): Promise<Sell> {
    return await this.service.createSell({
      data: {
        ...data,

        token: data.token
          ? {
              connect: data.token,
            }
          : undefined,

        wallet: data.wallet
          ? {
              connect: data.wallet,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sell] })
  @ApiNestedQuery(SellFindManyArgs)
  async sells(@common.Req() request: Request): Promise<Sell[]> {
    const args = plainToClass(SellFindManyArgs, request.query);
    return this.service.sells({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sell(
    @common.Param() params: SellWhereUniqueInput
  ): Promise<Sell | null> {
    const result = await this.service.sell({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSell(
    @common.Param() params: SellWhereUniqueInput,
    @common.Body() data: SellUpdateInput
  ): Promise<Sell | null> {
    try {
      return await this.service.updateSell({
        where: params,
        data: {
          ...data,

          token: data.token
            ? {
                connect: data.token,
              }
            : undefined,

          wallet: data.wallet
            ? {
                connect: data.wallet,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,
          id: true,
          price: true,

          token: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSell(
    @common.Param() params: SellWhereUniqueInput
  ): Promise<Sell | null> {
    try {
      return await this.service.deleteSell({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          price: true,

          token: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
