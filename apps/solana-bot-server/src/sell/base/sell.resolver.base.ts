/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sell } from "./Sell";
import { SellCountArgs } from "./SellCountArgs";
import { SellFindManyArgs } from "./SellFindManyArgs";
import { SellFindUniqueArgs } from "./SellFindUniqueArgs";
import { CreateSellArgs } from "./CreateSellArgs";
import { UpdateSellArgs } from "./UpdateSellArgs";
import { DeleteSellArgs } from "./DeleteSellArgs";
import { Token } from "../../token/base/Token";
import { Wallet } from "../../wallet/base/Wallet";
import { SellService } from "../sell.service";
@graphql.Resolver(() => Sell)
export class SellResolverBase {
  constructor(protected readonly service: SellService) {}

  async _sellsMeta(
    @graphql.Args() args: SellCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sell])
  async sells(@graphql.Args() args: SellFindManyArgs): Promise<Sell[]> {
    return this.service.sells(args);
  }

  @graphql.Query(() => Sell, { nullable: true })
  async sell(@graphql.Args() args: SellFindUniqueArgs): Promise<Sell | null> {
    const result = await this.service.sell(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sell)
  async createSell(@graphql.Args() args: CreateSellArgs): Promise<Sell> {
    return await this.service.createSell({
      ...args,
      data: {
        ...args.data,

        token: args.data.token
          ? {
              connect: args.data.token,
            }
          : undefined,

        wallet: args.data.wallet
          ? {
              connect: args.data.wallet,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Sell)
  async updateSell(@graphql.Args() args: UpdateSellArgs): Promise<Sell | null> {
    try {
      return await this.service.updateSell({
        ...args,
        data: {
          ...args.data,

          token: args.data.token
            ? {
                connect: args.data.token,
              }
            : undefined,

          wallet: args.data.wallet
            ? {
                connect: args.data.wallet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sell)
  async deleteSell(@graphql.Args() args: DeleteSellArgs): Promise<Sell | null> {
    try {
      return await this.service.deleteSell(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Token, {
    nullable: true,
    name: "token",
  })
  async getToken(@graphql.Parent() parent: Sell): Promise<Token | null> {
    const result = await this.service.getToken(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Wallet, {
    nullable: true,
    name: "wallet",
  })
  async getWallet(@graphql.Parent() parent: Sell): Promise<Wallet | null> {
    const result = await this.service.getWallet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
