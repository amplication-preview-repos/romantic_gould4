/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sell as PrismaSell,
  Token as PrismaToken,
  Wallet as PrismaWallet,
} from "@prisma/client";

export class SellServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SellCountArgs, "select">): Promise<number> {
    return this.prisma.sell.count(args);
  }

  async sells(args: Prisma.SellFindManyArgs): Promise<PrismaSell[]> {
    return this.prisma.sell.findMany(args);
  }
  async sell(args: Prisma.SellFindUniqueArgs): Promise<PrismaSell | null> {
    return this.prisma.sell.findUnique(args);
  }
  async createSell(args: Prisma.SellCreateArgs): Promise<PrismaSell> {
    return this.prisma.sell.create(args);
  }
  async updateSell(args: Prisma.SellUpdateArgs): Promise<PrismaSell> {
    return this.prisma.sell.update(args);
  }
  async deleteSell(args: Prisma.SellDeleteArgs): Promise<PrismaSell> {
    return this.prisma.sell.delete(args);
  }

  async getToken(parentId: string): Promise<PrismaToken | null> {
    return this.prisma.sell
      .findUnique({
        where: { id: parentId },
      })
      .token();
  }

  async getWallet(parentId: string): Promise<PrismaWallet | null> {
    return this.prisma.sell
      .findUnique({
        where: { id: parentId },
      })
      .wallet();
  }
}
