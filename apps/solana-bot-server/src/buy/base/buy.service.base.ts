/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Buy as PrismaBuy,
  Token as PrismaToken,
  Wallet as PrismaWallet,
} from "@prisma/client";

export class BuyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BuyCountArgs, "select">): Promise<number> {
    return this.prisma.buy.count(args);
  }

  async buys(args: Prisma.BuyFindManyArgs): Promise<PrismaBuy[]> {
    return this.prisma.buy.findMany(args);
  }
  async buy(args: Prisma.BuyFindUniqueArgs): Promise<PrismaBuy | null> {
    return this.prisma.buy.findUnique(args);
  }
  async createBuy(args: Prisma.BuyCreateArgs): Promise<PrismaBuy> {
    return this.prisma.buy.create(args);
  }
  async updateBuy(args: Prisma.BuyUpdateArgs): Promise<PrismaBuy> {
    return this.prisma.buy.update(args);
  }
  async deleteBuy(args: Prisma.BuyDeleteArgs): Promise<PrismaBuy> {
    return this.prisma.buy.delete(args);
  }

  async getToken(parentId: string): Promise<PrismaToken | null> {
    return this.prisma.buy
      .findUnique({
        where: { id: parentId },
      })
      .token();
  }

  async getWallet(parentId: string): Promise<PrismaWallet | null> {
    return this.prisma.buy
      .findUnique({
        where: { id: parentId },
      })
      .wallet();
  }
}
