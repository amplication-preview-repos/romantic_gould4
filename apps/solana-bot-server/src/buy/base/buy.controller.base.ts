/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BuyService } from "../buy.service";
import { BuyCreateInput } from "./BuyCreateInput";
import { Buy } from "./Buy";
import { BuyFindManyArgs } from "./BuyFindManyArgs";
import { BuyWhereUniqueInput } from "./BuyWhereUniqueInput";
import { BuyUpdateInput } from "./BuyUpdateInput";

export class BuyControllerBase {
  constructor(protected readonly service: BuyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Buy })
  async createBuy(@common.Body() data: BuyCreateInput): Promise<Buy> {
    return await this.service.createBuy({
      data: {
        ...data,

        token: data.token
          ? {
              connect: data.token,
            }
          : undefined,

        wallet: data.wallet
          ? {
              connect: data.wallet,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Buy] })
  @ApiNestedQuery(BuyFindManyArgs)
  async buys(@common.Req() request: Request): Promise<Buy[]> {
    const args = plainToClass(BuyFindManyArgs, request.query);
    return this.service.buys({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Buy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async buy(@common.Param() params: BuyWhereUniqueInput): Promise<Buy | null> {
    const result = await this.service.buy({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Buy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBuy(
    @common.Param() params: BuyWhereUniqueInput,
    @common.Body() data: BuyUpdateInput
  ): Promise<Buy | null> {
    try {
      return await this.service.updateBuy({
        where: params,
        data: {
          ...data,

          token: data.token
            ? {
                connect: data.token,
              }
            : undefined,

          wallet: data.wallet
            ? {
                connect: data.wallet,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,
          id: true,
          price: true,

          token: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Buy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBuy(
    @common.Param() params: BuyWhereUniqueInput
  ): Promise<Buy | null> {
    try {
      return await this.service.deleteBuy({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          price: true,

          token: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
