/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Buy } from "./Buy";
import { BuyCountArgs } from "./BuyCountArgs";
import { BuyFindManyArgs } from "./BuyFindManyArgs";
import { BuyFindUniqueArgs } from "./BuyFindUniqueArgs";
import { CreateBuyArgs } from "./CreateBuyArgs";
import { UpdateBuyArgs } from "./UpdateBuyArgs";
import { DeleteBuyArgs } from "./DeleteBuyArgs";
import { Token } from "../../token/base/Token";
import { Wallet } from "../../wallet/base/Wallet";
import { BuyService } from "../buy.service";
@graphql.Resolver(() => Buy)
export class BuyResolverBase {
  constructor(protected readonly service: BuyService) {}

  async _buysMeta(
    @graphql.Args() args: BuyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Buy])
  async buys(@graphql.Args() args: BuyFindManyArgs): Promise<Buy[]> {
    return this.service.buys(args);
  }

  @graphql.Query(() => Buy, { nullable: true })
  async buy(@graphql.Args() args: BuyFindUniqueArgs): Promise<Buy | null> {
    const result = await this.service.buy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Buy)
  async createBuy(@graphql.Args() args: CreateBuyArgs): Promise<Buy> {
    return await this.service.createBuy({
      ...args,
      data: {
        ...args.data,

        token: args.data.token
          ? {
              connect: args.data.token,
            }
          : undefined,

        wallet: args.data.wallet
          ? {
              connect: args.data.wallet,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Buy)
  async updateBuy(@graphql.Args() args: UpdateBuyArgs): Promise<Buy | null> {
    try {
      return await this.service.updateBuy({
        ...args,
        data: {
          ...args.data,

          token: args.data.token
            ? {
                connect: args.data.token,
              }
            : undefined,

          wallet: args.data.wallet
            ? {
                connect: args.data.wallet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Buy)
  async deleteBuy(@graphql.Args() args: DeleteBuyArgs): Promise<Buy | null> {
    try {
      return await this.service.deleteBuy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Token, {
    nullable: true,
    name: "token",
  })
  async getToken(@graphql.Parent() parent: Buy): Promise<Token | null> {
    const result = await this.service.getToken(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Wallet, {
    nullable: true,
    name: "wallet",
  })
  async getWallet(@graphql.Parent() parent: Buy): Promise<Wallet | null> {
    const result = await this.service.getWallet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
