/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TokenService } from "../token.service";
import { TokenCreateInput } from "./TokenCreateInput";
import { Token } from "./Token";
import { TokenFindManyArgs } from "./TokenFindManyArgs";
import { TokenWhereUniqueInput } from "./TokenWhereUniqueInput";
import { TokenUpdateInput } from "./TokenUpdateInput";
import { BuyFindManyArgs } from "../../buy/base/BuyFindManyArgs";
import { Buy } from "../../buy/base/Buy";
import { BuyWhereUniqueInput } from "../../buy/base/BuyWhereUniqueInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";
import { SellFindManyArgs } from "../../sell/base/SellFindManyArgs";
import { Sell } from "../../sell/base/Sell";
import { SellWhereUniqueInput } from "../../sell/base/SellWhereUniqueInput";

export class TokenControllerBase {
  constructor(protected readonly service: TokenService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Token })
  async createToken(@common.Body() data: TokenCreateInput): Promise<Token> {
    return await this.service.createToken({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        price: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Token] })
  @ApiNestedQuery(TokenFindManyArgs)
  async tokens(@common.Req() request: Request): Promise<Token[]> {
    const args = plainToClass(TokenFindManyArgs, request.query);
    return this.service.tokens({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        price: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Token })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async token(
    @common.Param() params: TokenWhereUniqueInput
  ): Promise<Token | null> {
    const result = await this.service.token({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        price: true,
        symbolField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Token })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateToken(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() data: TokenUpdateInput
  ): Promise<Token | null> {
    try {
      return await this.service.updateToken({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          price: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Token })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteToken(
    @common.Param() params: TokenWhereUniqueInput
  ): Promise<Token | null> {
    try {
      return await this.service.deleteToken({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          price: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/buys")
  @ApiNestedQuery(BuyFindManyArgs)
  async findBuys(
    @common.Req() request: Request,
    @common.Param() params: TokenWhereUniqueInput
  ): Promise<Buy[]> {
    const query = plainToClass(BuyFindManyArgs, request.query);
    const results = await this.service.findBuys(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/buys")
  async connectBuys(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: BuyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buys: {
        connect: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/buys")
  async updateBuys(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: BuyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buys: {
        set: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/buys")
  async disconnectBuys(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: BuyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buys: {
        disconnect: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: TokenWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        message: true,
        read: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  async connectNotifications(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  async updateNotifications(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  async disconnectNotifications(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/sells")
  @ApiNestedQuery(SellFindManyArgs)
  async findSells(
    @common.Req() request: Request,
    @common.Param() params: TokenWhereUniqueInput
  ): Promise<Sell[]> {
    const query = plainToClass(SellFindManyArgs, request.query);
    const results = await this.service.findSells(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sells")
  async connectSells(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: SellWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sells: {
        connect: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sells")
  async updateSells(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: SellWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sells: {
        set: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sells")
  async disconnectSells(
    @common.Param() params: TokenWhereUniqueInput,
    @common.Body() body: SellWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sells: {
        disconnect: body,
      },
    };
    await this.service.updateToken({
      where: params,
      data,
      select: { id: true },
    });
  }
}
