/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WalletService } from "../wallet.service";
import { WalletCreateInput } from "./WalletCreateInput";
import { Wallet } from "./Wallet";
import { WalletFindManyArgs } from "./WalletFindManyArgs";
import { WalletWhereUniqueInput } from "./WalletWhereUniqueInput";
import { WalletUpdateInput } from "./WalletUpdateInput";
import { BuyFindManyArgs } from "../../buy/base/BuyFindManyArgs";
import { Buy } from "../../buy/base/Buy";
import { BuyWhereUniqueInput } from "../../buy/base/BuyWhereUniqueInput";
import { SellFindManyArgs } from "../../sell/base/SellFindManyArgs";
import { Sell } from "../../sell/base/Sell";
import { SellWhereUniqueInput } from "../../sell/base/SellWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

export class WalletControllerBase {
  constructor(protected readonly service: WalletService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Wallet })
  async createWallet(@common.Body() data: WalletCreateInput): Promise<Wallet> {
    return await this.service.createWallet({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        privateKey: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Wallet] })
  @ApiNestedQuery(WalletFindManyArgs)
  async wallets(@common.Req() request: Request): Promise<Wallet[]> {
    const args = plainToClass(WalletFindManyArgs, request.query);
    return this.service.wallets({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        privateKey: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Wallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wallet(
    @common.Param() params: WalletWhereUniqueInput
  ): Promise<Wallet | null> {
    const result = await this.service.wallet({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        privateKey: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Wallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWallet(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() data: WalletUpdateInput
  ): Promise<Wallet | null> {
    try {
      return await this.service.updateWallet({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          privateKey: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Wallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWallet(
    @common.Param() params: WalletWhereUniqueInput
  ): Promise<Wallet | null> {
    try {
      return await this.service.deleteWallet({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          privateKey: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/buys")
  @ApiNestedQuery(BuyFindManyArgs)
  async findBuys(
    @common.Req() request: Request,
    @common.Param() params: WalletWhereUniqueInput
  ): Promise<Buy[]> {
    const query = plainToClass(BuyFindManyArgs, request.query);
    const results = await this.service.findBuys(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/buys")
  async connectBuys(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: BuyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buys: {
        connect: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/buys")
  async updateBuys(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: BuyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buys: {
        set: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/buys")
  async disconnectBuys(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: BuyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buys: {
        disconnect: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/sells")
  @ApiNestedQuery(SellFindManyArgs)
  async findSells(
    @common.Req() request: Request,
    @common.Param() params: WalletWhereUniqueInput
  ): Promise<Sell[]> {
    const query = plainToClass(SellFindManyArgs, request.query);
    const results = await this.service.findSells(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        token: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sells")
  async connectSells(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: SellWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sells: {
        connect: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sells")
  async updateSells(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: SellWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sells: {
        set: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sells")
  async disconnectSells(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: SellWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sells: {
        disconnect: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: WalletWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        status: true,
        typeField: true,
        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: WalletWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateWallet({
      where: params,
      data,
      select: { id: true },
    });
  }
}
